{"version":3,"sources":["components/GameInfo.js","components/Intro.js","components/Shapes.js","components/Board.js","components/Home.js","components/App.js","index.js"],"names":["GameInfo","props","react_default","a","createElement","className","next","map","square","style","background","nextColor","top","left","height","width","score","level","Intro","id","onClick","start","shapes","Board","_useState","useState","_useState2","Object","slicedToArray","board","setBoard","_useState3","_useState4","setScore","_useState5","_useState6","setLevel","_useState7","_useState8","current","setCurrent","_useState9","_useState10","currentColor","setCurrentColor","_useState11","_useState12","setNext","_useState13","_useState14","setNextColor","_useState15","_useState16","timer","setTimer","_useState17","_useState18","setStart","colors","window","onkeydown","e","keyCode","shiftShape","rotate","dropShape","useEffect","setTimeout","autoDropHelper","centerx","centery","newShape","toConsumableArray","shapeCopy","count","arr","x","y","push","update","_i","length","item","newBoard","affectedRows","sort","b","tetrises","gameOver","_i2","row","checkTetris","newScore","i","nextIndex","Math","floor","random","newNext","nextCopy","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","value","err","return","alert","direction","tetris","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","emptyrow","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","components_GameInfo","rowIndex","colIndex","components_Intro","shapeIndex","shape","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","newRow","j","startGame","Home","components_Board","App","components_Home","Component","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.32f9d935.chunk.js","sourcesContent":["import React from \"react\";\n\nconst GameInfo = (props) => {\n  return (\n    <div className='gameInfoContainer'>\n      <div className='infoDiv'>\n        <p>Next</p>\n        <div className='nextContainer'>\n          {props.next.map((square) => (\n            <div\n              className='square'\n              style={{\n                background: props.nextColor,\n                top: square[1] * 17 + \"px\",\n                left: square[0] * 17 + \"px\",\n                height: \"15px\",\n                width: \"15px\",\n              }}\n            />\n          ))}\n        </div>\n      </div>\n      <div className='infoDiv'>\n        <p>Score</p>\n        <p>{props.score}</p>\n      </div>\n      <div className='infoDiv'>\n        <p>Level</p>\n        <p>{props.level}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default GameInfo;\n","import React from \"react\";\n\nconst Intro = (props) => {\n  return (\n    <div className='introContainer'>\n      <h2> Tetris </h2>\n      <p> How to Play: </p>\n      <p id='introText'>\n        Shift blocks to the left, right and down with the arrow keys. Use the up key to\n        rotate blocks.\n      </p>\n      <button onClick={props.start}> Start Game</button>\n    </div>\n  );\n};\n\nexport default Intro;\n","//4 is the middle index\n\nconst shapes = [\n  [[4, 1], [4, 0], [4, 2], [4, 3]], //line\n  [[4, 0], [5, 0], [4, 1], [5, 1]], //square\n  [[5, 1], [4, 0], [5, 0], [5, 2]], //l shape\n  [[4, 1], [5, 0], [4, 0], [4, 2]], //j shape\n  [[4, 1], [3, 1], [4, 0], [5, 1]], //T shape\n  [[4, 1], [3, 1], [4, 0], [3, 2]], //Z shape\n  [[4, 1], [4, 0], [5, 1], [5, 2]], //S shape\n];\n\nexport default shapes;\n","import React, { useState, useEffect } from \"react\";\nimport GameInfo from \"./GameInfo\";\nimport Intro from \"./Intro\";\nimport shapes from \"./Shapes\";\n\nconst Board = () => {\n  const [board, setBoard] = useState([]); //keep track of tetrises and which square is where\n  const [score, setScore] = useState(0);\n  const [level, setLevel] = useState(1);\n  const [current, setCurrent] = useState([]);\n  const [currentColor, setCurrentColor] = useState(\"\");\n  const [next, setNext] = useState([]);\n  const [nextColor, setNextColor] = useState(\"\");\n  const [timer, setTimer] = useState(false);\n  const [start, setStart] = useState(false);\n  const colors = [\"red\", \"purple\", \"green\", \"orange\", \"brown\", \"yellow\", \"blue\"];\n\n  window.onkeydown = (e) => {\n    if (e.keyCode === 37) {\n      // left arrow\n      shiftShape(-1);\n    } else if (e.keyCode === 38) {\n      // up arrow\n      rotate();\n    } else if (e.keyCode === 39) {\n      // right arrow\n      shiftShape(1);\n    } else if (e.keyCode === 40) {\n      // down arrow\n      dropShape();\n    }\n  };\n\n  useEffect(\n    () => {\n      if (timer && start) {\n        //initialize the timer once after start is set\n        setTimer(false);\n        setTimeout(autoDropHelper, 1000 - 50 * level);\n      }\n    },\n    [timer, start]\n  );\n\n  const rotate = () => {\n    if (currentColor !== \"purple\") {\n      // can't rotate a square\n      const centerx = current[0][0];\n      const centery = current[0][1];\n      let newShape = [...current];\n      const shapeCopy = [...current];\n      let count = 1;\n      let arr = [[centerx, centery]];\n      while (count < 4) {\n        //get new coordinates of rotated shape\n        let x =\n          shapeCopy[count][0] +\n          (centerx - shapeCopy[count][0]) +\n          (centery - shapeCopy[count][1]);\n        let y =\n          shapeCopy[count][1] +\n          (centery - shapeCopy[count][1]) +\n          (shapeCopy[count][0] - centerx);\n        arr.push([x, y]);\n        count++;\n      }\n      let update = true;\n      for (let item of arr) {\n        //Check that each new coordinate would be valid.\n        if (item[0] < 0 || item[0] > 9) {\n          update = false;\n          break;\n        }\n        if (item[1] < 0 || item[1] > 19) {\n          update = false;\n          break;\n        }\n        if (board[item[1]][item[0]].length !== 0) {\n          update = false;\n          break;\n        }\n      }\n      if (update) {\n        newShape[1][0] = arr[1][0];\n        newShape[1][1] = arr[1][1];\n        newShape[2][0] = arr[2][0];\n        newShape[2][1] = arr[2][1];\n        newShape[3][0] = arr[3][0];\n        newShape[3][1] = arr[3][1];\n        setCurrent(newShape);\n      }\n    }\n  };\n\n  const autoDropHelper = () => {\n    let newShape = [...current];\n    //If the shape did not land on the ground or another shape\n    if (\n      newShape[0][1] <= 18 &&\n      newShape[1][1] <= 18 &&\n      newShape[2][1] <= 18 &&\n      newShape[3][1] <= 18 &&\n      (board[newShape[0][1] + 1][newShape[0][0]].length === 0 &&\n        board[newShape[1][1] + 1][newShape[1][0]].length === 0 &&\n        board[newShape[2][1] + 1][newShape[2][0]].length === 0 &&\n        board[newShape[3][1] + 1][newShape[3][0]].length === 0)\n    ) {\n      newShape[0][1] += 1;\n      newShape[1][1] += 1;\n      newShape[2][1] += 1;\n      newShape[3][1] += 1;\n      setCurrent(newShape);\n      setTimeout(autoDropHelper, 1000 - 50 * level);\n    } else {\n      //update board if shape landed\n      let newBoard = [...board];\n      newBoard[newShape[0][1]][newShape[0][0]] = currentColor;\n      newBoard[newShape[1][1]][newShape[1][0]] = currentColor;\n      newBoard[newShape[2][1]][newShape[2][0]] = currentColor;\n      newBoard[newShape[3][1]][newShape[3][0]] = currentColor;\n      //handle potential tetrises\n      let affectedRows = [newShape[1][1], newShape[0][1], newShape[2][1], newShape[3][1]];\n      affectedRows.sort(function(a, b) {\n        return a - b;\n      });\n      let tetrises = 0;\n      let gameOver = false;\n      for (let row of affectedRows) {\n        //for each row check if the game is done\n        if (row < 1) {\n          gameOver = true;\n        }\n        let res = checkTetris(row, newBoard);\n        if (res) {\n          tetrises++;\n        }\n      }\n      if (tetrises !== 0) {\n        //add individually because we need to see if we changed levels\n        let newScore = score;\n        for (let i = 0; i < tetrises; i++) {\n          newScore += 100;\n          if (newScore % 1000 === 0) {\n            //check if there is a level change\n            setLevel(level + 1);\n          }\n        }\n        setScore(newScore);\n      }\n      //generate next shape\n      const nextIndex = Math.floor(Math.random() * shapes.length);\n      let newNext = [...shapes[nextIndex]];\n      let nextCopy = [];\n      for (let arr of newNext) {\n        nextCopy.push([arr[0], arr[1]]); //We have to do it like this to avoid mutating the original array\n      }\n      setCurrentColor(nextColor);\n      setCurrent(next);\n      setNext(nextCopy);\n      setNextColor(colors[nextIndex]);\n      if (gameOver) {\n        setTimer(false);\n        setStart(false);\n        alert(\"Game Over!\");\n      } else {\n        setTimer(true);\n      }\n    }\n  };\n\n  const dropShape = () => {\n    let newShape = [...current];\n    if (\n      newShape[0][1] <= 18 &&\n      newShape[1][1] <= 18 &&\n      newShape[2][1] <= 18 &&\n      newShape[3][1] <= 18 &&\n      (board[newShape[0][1] + 1][newShape[0][0]].length === 0 &&\n        board[newShape[1][1] + 1][newShape[1][0]].length === 0 &&\n        board[newShape[2][1] + 1][newShape[2][0]].length === 0 &&\n        board[newShape[3][1] + 1][newShape[3][0]].length === 0)\n    ) {\n      newShape[0][1] += 1;\n      newShape[1][1] += 1;\n      newShape[2][1] += 1;\n      newShape[3][1] += 1;\n      setCurrent(newShape);\n    }\n  };\n\n  const shiftShape = (direction) => {\n    let newShape = [...current];\n    //Check that the shape wont hit the walls or another block\n    if (\n      ((direction === -1 &&\n        newShape[0][0] >= 1 &&\n        newShape[1][0] >= 1 &&\n        newShape[2][0] >= 1 &&\n        newShape[3][0] >= 1) ||\n        (direction === 1 &&\n          newShape[0][0] <= 8 &&\n          newShape[1][0] <= 8 &&\n          newShape[2][0] <= 8 &&\n          newShape[3][0] <= 8)) &&\n      (board[newShape[0][1]][newShape[0][0] + 1 * direction].length === 0 &&\n        board[newShape[1][1]][newShape[1][0] + 1 * direction].length === 0 &&\n        board[newShape[2][1]][newShape[2][0] + 1 * direction].length === 0 &&\n        board[newShape[3][1]][newShape[3][0] + 1 * direction].length === 0)\n    ) {\n      newShape[0][0] += 1 * direction;\n      newShape[1][0] += 1 * direction;\n      newShape[2][0] += 1 * direction;\n      newShape[3][0] += 1 * direction;\n      setCurrent(newShape);\n    }\n  };\n\n  const checkTetris = (row, newBoard) => {\n    let tetris = true;\n    for (let item of newBoard[row]) {\n      //check if all elements in the row are occupied\n      if (item.length === 0) {\n        tetris = false;\n        break;\n      }\n    }\n    //adjust the board if needed. Shift all rows above, down by 1\n    if (tetris) {\n      newBoard[row] = newBoard[row - 1];\n      newBoard[row - 1] = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\n      row--;\n      while (row >= 1) {\n        //drop all the bricks above this line. if we find an empty row it means we can stop the process\n        let emptyrow = true;\n        for (let item of newBoard[row - 1]) {\n          if (item.length > 0) {\n            emptyrow = false;\n            break;\n          }\n        }\n        if (emptyrow) {\n          break;\n        } else {\n          newBoard[row] = newBoard[row - 1];\n          newBoard[row - 1] = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\n        }\n        row--;\n      }\n      setBoard(newBoard);\n    }\n    return tetris;\n  };\n\n  const startGame = () => {\n    const shapeIndex = Math.floor(Math.random() * shapes.length);\n    let shape = [...shapes[shapeIndex]];\n    let shapeCopy = [];\n    for (let arr of shape) {\n      shapeCopy.push([arr[0], arr[1]]); //We have to do it like this to avoid mutating the original array\n    }\n    const nextIndex = Math.floor(Math.random() * shapes.length);\n    let next = [...shapes[nextIndex]];\n    let nextCopy = [];\n    for (let arr of next) {\n      nextCopy.push([arr[0], arr[1]]); //We have to do it like this to avoid mutating the original array\n    }\n    let newBoard = [];\n    for (let i = 0; i < 20; i++) {\n      let newRow = [];\n      for (let j = 0; j < 10; j++) {\n        newRow.push(\"\");\n      }\n      newBoard.push(newRow);\n    }\n    setBoard(newBoard);\n    setCurrentColor(colors[shapeIndex]);\n    setCurrent(shapeCopy);\n    setTimer(true);\n    setStart(true);\n    setNext(nextCopy);\n    setNextColor(colors[nextIndex]);\n    setScore(0);\n    setLevel(1);\n  };\n\n  if (!start) {\n    return (\n      <div className='boardContainer'>\n        <Intro\n          start={() => {\n            startGame();\n          }}\n        />\n        <GameInfo next={next} nextColor={nextColor} score={score} level={level} />\n      </div>\n    );\n  }\n\n  return (\n    <div className='boardContainer'>\n      <GameInfo next={next} nextColor={nextColor} score={score} level={level} />\n      {current.map((square) => (\n        <div\n          className='square'\n          style={{\n            background: currentColor,\n            top: square[1] * 30 + \"px\",\n            left: square[0] * 30 + \"px\",\n          }}\n        />\n      ))}\n      {board.map((row, rowIndex) =>\n        row.map(\n          (square, colIndex) =>\n            square.length > 0 && (\n              <div\n                className='square'\n                style={{\n                  background: square,\n                  top: rowIndex * 30 + \"px\",\n                  left: colIndex * 30 + \"px\",\n                }}\n              />\n            )\n        )\n      )}\n    </div>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\nimport Board from \"./Board\";\n\nconst Home = (props) => {\n  return (\n    <div className='homeContainer'>\n      <Board />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { Component } from 'react';\nimport Home from './Home'\nimport '../scss/app.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app-container\">\n        <Home/>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}