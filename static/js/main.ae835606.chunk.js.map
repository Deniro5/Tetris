{"version":3,"sources":["components/GameInfo.js","components/Intro.js","components/Shapes.js","components/Board.js","components/Home.js","components/App.js","index.js"],"names":["GameInfo","props","react_default","a","createElement","className","next","map","square","style","background","nextColor","top","left","height","width","score","level","Intro","fontSize","marginTop","onClick","start","shapes","Board","_useState","useState","_useState2","Object","slicedToArray","board","setBoard","_useState3","_useState4","setScore","_useState5","_useState6","setLevel","_useState7","_useState8","current","setCurrent","_useState9","_useState10","currentColor","setCurrentColor","_useState11","_useState12","setNext","_useState13","_useState14","setNextColor","_useState15","_useState16","timer","setTimer","_useState17","_useState18","setStart","colors","window","onkeydown","e","keyCode","shiftShape","rotate","dropShape","useEffect","setTimeout","autoDropHelper","centerx","centery","newShape","toConsumableArray","shapeCopy","count","arr","x","y","push","update","_i","length","item","newBoard","affectedRows","sort","b","console","log","tetrises","gameOver","_i2","row","checkTetris","newScore","i","nextIndex","Math","floor","random","newNext","nextCopy","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","value","err","return","alert","direction","tetris","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","emptyrow","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","components_GameInfo","rowIndex","colIndex","components_Intro","shapeIndex","shape","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","newRow","j","startGame","Home","components_Board","App","components_Home","Component","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.ae835606.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst GameInfo = props => {\n\n  return (\n    <div className = \"gameInfoContainer\">\n        <div className = \"infoDiv\">\n          <p>Next</p>\n          <div className = \"nextContainer\">\n          {props.next.map((square)=> (\n              <div className = \"square\" style = {{background: props.nextColor, top: square[1] * 17 + \"px\", left: square[0] * 17 + \"px\", height: \"15px\" , width: \"15px\"}} />\n          ))}\n          </div>\n\n        </div>\n        <div className = \"infoDiv\">\n          <p>Score</p>\n          <p>{props.score}</p> \n        </div>\n        <div className = \"infoDiv\">\n          <p>Level</p>\n          <p>{props.level}</p> \n        </div>\n    </div>\n    );\n  }\n\n\nexport default GameInfo;\n","import React from 'react';\n\nconst Intro = props => {\n\n  return (\n    <div className=\"introContainer\">\n      <h2> Tetris </h2>\n      <p> How to Play: </p>\n      <p style = {{fontSize:\"14px\", marginTop: \"20px\"}}> Shift blocks to the left, right and down with the arrow keys. Use the up key to rotate blocks. </p>\n      <button onClick = {props.start}> Start Game</button>\n    </div>\n  );\n}\n\n\nexport default Intro;\n\n\n","//4 is the middle index\n\nconst shapes = \n  [\n    [[4, 1], [4, 0], [4, 2], [4, 3]],   //line\n    [[4, 0], [5, 0], [4, 1], [5, 1]],   //square\n    [[5, 1], [4, 0], [5, 0], [5, 2]],   //l shape\n    [[4, 1], [5, 0], [4, 0], [4, 2]],   //j shape\n    [[4, 1], [3, 1], [4, 0], [5, 1]],   //T shape\n    [[4, 1], [3, 1], [4, 0], [3, 2]],   //Z shape\n    [[4, 1], [4, 0], [5, 1], [5, 2]],   //S shape  \n  ];\n\nexport default shapes;\n\n","import React, {useState, useEffect} from 'react';\nimport GameInfo from './GameInfo';\nimport Intro from './Intro';\nimport shapes from './Shapes'\n\nconst Board = () => {\n\n  const [board,setBoard] = useState([]) //keep track of tetrises and which square is where\n  const [score, setScore] = useState(0)\n  const [level, setLevel] = useState(1)\n  const [current, setCurrent] = useState([])\n  const [currentColor, setCurrentColor] = useState(\"\")\n  const [next, setNext] = useState([])\n  const [nextColor, setNextColor] = useState(\"\")\n  const [timer, setTimer] = useState(false)\n  const [start, setStart] = useState(false)\n  const colors = [\"red\", \"purple\", \"green\", \"orange\", \"brown\", \"yellow\", \"blue\"]\n\n  window.onkeydown = (e) => {\n   if (e.keyCode === 37) {       // left arrow\n      shiftShape(-1)\n   }\n   else if (e.keyCode === 38) {     // up arrow\n      rotate()\n    }\n   else if (e.keyCode === 39) {       // right arrow\n      shiftShape(1)\n   }\n   else if (e.keyCode === 40) {     // down arrow\n      dropShape()\n    }\n  }\n\n  useEffect (() => {\n    if (timer && start) {  //initialize the timer once after start is set\n      setTimer(false)\n      setTimeout(autoDropHelper, 1000 - (50 * level))\n    } \n  }, [timer,start])\n\n  const rotate = () => {\n    if (currentColor !== \"purple\") { // can't rotate a square \n      const centerx = current[0][0]\n      const centery = current[0][1]\n      let newShape = [...current]\n      const shapeCopy = [...current]\n      let count = 1;\n      let arr = [[centerx,centery]]\n      while (count < 4) {  //get new coordinates of rotated shape\n        let x = shapeCopy[count][0] + (centerx - shapeCopy[count][0]) + (centery - shapeCopy[count][1])\n        let y = shapeCopy[count][1] + (centery - shapeCopy[count][1]) + (shapeCopy[count][0] - centerx) \n        arr.push([x,y])\n        count++;\n      }\n      let update = true; \n      for (let item of arr) {  //Check that each new coordinate would be valid.\n        if (item[0] < 0 || item[0] > 9) {\n          update = false;\n          break;\n        } \n        if (item[1] < 0 || item[1] > 19)  {\n          update = false;\n          break;\n        }\n        if (board[item[1]][item[0]].length !== 0) {\n          update = false;\n          break;\n        }\n      }\n      if (update) {\n        newShape[1][0] = arr[1][0]\n        newShape[1][1] = arr[1][1]\n        newShape[2][0] = arr[2][0]\n        newShape[2][1] = arr[2][1]\n        newShape[3][0] = arr[3][0]\n        newShape[3][1] = arr[3][1]\n        setCurrent(newShape)\n      }       \n    }\n  }\n\n  const autoDropHelper = () => {\n    let newShape = [...current]\n    //If the shape did not land  \n    if (newShape[0][1] <= 18 && newShape[1][1] <= 18 && newShape[2][1] <= 18 && newShape[3][1] <= 18  &&  (board[newShape[0][1] + 1][newShape[0][0]].length === 0 && board[newShape[1][1] + 1][newShape[1][0]].length === 0 && board[newShape[2][1]+ 1][newShape[2][0]].length === 0 && board[newShape[3][1]+ 1][newShape[3][0]].length === 0)) {\n      newShape[0][1] += 1\n      newShape[1][1] += 1\n      newShape[2][1] += 1\n      newShape[3][1] += 1\n      setCurrent(newShape);\n      setTimeout(autoDropHelper, 1000 - (50 * level))\n    }\n    else {\n      //update board if shape landed\n      let newBoard = [...board];\n      newBoard[newShape[0][1]][newShape[0][0]] = currentColor\n      newBoard[newShape[1][1]][newShape[1][0]] = currentColor\n      newBoard[newShape[2][1]][newShape[2][0]] = currentColor\n      newBoard[newShape[3][1]][newShape[3][0]] = currentColor\n      //handle potential tetrises\n      let affectedRows = [newShape[1][1], newShape[0][1], newShape[2][1], newShape[3][1]] \n      affectedRows.sort(function(a, b){return a-b});\n      console.log(affectedRows)\n      let tetrises = 0;\n      let gameOver = false;\n      for (let row of affectedRows) {\n        if (row < 1) { //for each row check if the game is done\n          gameOver = true;\n        }\n        let res = checkTetris(row, newBoard)\n        if (res) {\n          tetrises++;\n        }\n      }\n      if (tetrises !==0) {\n        let newScore = score;\n        for (let i = 0; i < tetrises ; i++) {\n          newScore += 100;\n          if (newScore % 1000 === 0) {  //check if there is a level change \n            setLevel(level + 1)\n          }\n        }\n        setScore(newScore)\n      }\n      //generate next shape\n      const nextIndex = Math.floor(Math.random() * shapes.length);\n      let newNext = [...shapes[nextIndex]];      \n      let nextCopy = [];  \n      for (let arr of newNext) {\n        nextCopy.push([arr[0], arr[1]])   //We have to do it like this to avoid mutating the original array\n      }       \n      setCurrentColor(nextColor);\n      setCurrent(next);\n      setNext(nextCopy); \n      setNextColor(colors[nextIndex]); \n      if (gameOver) {\n        setTimer(false);\n        setStart(false);\n        alert(\"Game Over!\")\n      }\n      else {\n        setTimer(true);\n      }\n    }\n  }\n\n  const dropShape = () => {\n    let newShape = [...current] \n    if (newShape[0][1] <= 18 && newShape[1][1] <= 18 && newShape[2][1] <= 18 && newShape[3][1] <= 18  &&  (board[newShape[0][1] + 1][newShape[0][0]].length === 0 && board[newShape[1][1] + 1][newShape[1][0]].length === 0 && board[newShape[2][1]+ 1][newShape[2][0]].length === 0 && board[newShape[3][1]+ 1][newShape[3][0]].length === 0)) {\n      newShape[0][1] += 1\n      newShape[1][1] += 1\n      newShape[2][1] += 1\n      newShape[3][1] += 1\n      setCurrent(newShape);\n    }\n  }\n\n  const shiftShape = (direction) => {\n    let newShape = [...current]\n    let update = false; \n    if (direction === -1 && newShape[0][0] >= 1 && newShape[1][0] >= 1 && newShape[2][0] >= 1 && newShape[3][0] >= 1) {\n      update = true;\n    }\n    if (direction === 1 && newShape[0][0] <= 8 && newShape[1][0] <=8 && newShape[2][0] <=8  && newShape[3][0] <=8 ) {\n      update = true;\n    }\n    if (update && (board[newShape[0][1]][newShape[0][0] + 1*direction].length === 0 && board[newShape[1][1]][newShape[1][0] + 1*direction].length === 0 && board[newShape[2][1]][newShape[2][0] + 1*direction].length === 0 && board[newShape[3][1]][newShape[3][0] + 1*direction].length === 0)) {\n      newShape[0][0] += 1*direction\n      newShape[1][0] += 1*direction\n      newShape[2][0] += 1*direction\n      newShape[3][0] += 1*direction\n      setCurrent(newShape);\n    }\n  }\n\n  const checkTetris = (row , newBoard) => {\n    let tetris = true; \n    for (let item of newBoard[row]) { //check if all elements in the row are occupied\n      if (item.length === 0) {\n        tetris = false;\n        break;\n      }\n    }\n    if (tetris) {\n      newBoard[row] = newBoard[row-1] \n      newBoard[row-1] = [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"] \n      row--;\n      while (row >= 1) {  //drop all the bricks above this line\n        let emptyrow = true;\n        for (let item of newBoard[row - 1]) {\n          if (item.length > 0) {\n            emptyrow = false;\n            break;\n          }\n        }\n        if (emptyrow) {\n          break;\n        }\n        else {\n          newBoard[row] = newBoard[row-1] \n          newBoard[row-1] = [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"] \n        }\n        row--;\n      }\n      setBoard(newBoard)\n    } \n    return tetris;\n  }\n\n  const startGame = () => {\n    const shapeIndex = Math.floor(Math.random() * shapes.length);\n    let shape = [...shapes[shapeIndex]];    \n    let shapeCopy = [];\n    for (let arr of shape) {\n      shapeCopy.push([arr[0], arr[1]])   //We have to do it like this to avoid mutating the original array\n    }\n    const nextIndex = Math.floor(Math.random() * shapes.length);\n    let next = [...shapes[nextIndex]];      \n    let nextCopy = [];  \n    for (let arr of next) {\n      nextCopy.push([arr[0], arr[1]])   //We have to do it like this to avoid mutating the original array\n    } \n    let newBoard = []\n    for (let i = 0; i < 20; i++) {\n      let newRow = []\n      for (let j = 0; j < 10; j++) {\n        newRow.push(\"\")\n      }\n      newBoard.push(newRow)\n    } \n    setBoard(newBoard)\n    setCurrentColor(colors[shapeIndex])\n    setCurrent(shapeCopy)\n    setTimer(true)\n    setStart(true);\n    setNext(nextCopy)\n    setNextColor(colors[nextIndex])\n    setScore(0)\n    setLevel(1);\n  }\n\n  if (!start) {\n    return (\n      <div className = \"boardContainer\">\n        <Intro start = {() => {startGame()}}/>\n        <GameInfo next = {next} nextColor = {nextColor} score = {score} level = {level}/>\n      </div>\n      );\n  }\n\n  return (\n    <div className = \"boardContainer\">\n      <GameInfo next = {next} nextColor = {nextColor} score = {score} level = {level}/>\n      {current.map((square) => (\n        <div className = \"square\" style = {{background: currentColor, top: square[1] * 30 + \"px\", left: square[0] * 30 + \"px\"}} />\n      ))}\n      {board.map((row, rowIndex) => (\n        row.map((square, colIndex) => (\n          square.length > 0 && <div className = \"square\" style = {{background: square, top: rowIndex * 30 + \"px\", left: colIndex * 30 + \"px\"}} />\n        ))\n      ))}\n    </div>\n    );\n  }\n\nexport default Board;\n","import React from 'react';\nimport Board from './Board';\n\nconst Home = props => {\n\n  return (\n    <div className=\"homeContainer\">\n      <Board/>\n    </div>\n  );\n}\n\n\nexport default Home;\n\n\n","import React, { Component } from 'react';\nimport Home from './Home'\nimport '../scss/app.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app-container\">\n        <Home/>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}